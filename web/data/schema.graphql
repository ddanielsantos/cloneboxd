"""The root query type"""
type Query {
  movieList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): MovieConnection
  singleMovie(id: ID!): Movie
  searchMovieFromTMDB(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    title: String!
  ): MovieConnection
  me: User
  userList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): UserConnection
  reviewList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): UserReviewConnection
  singleReview(id: ID!): UserReview

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

"""A connection to a list of items."""
type MovieConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MovieEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type MovieEdge {
  """The item at the end of the edge"""
  node: Movie

  """A cursor for use in pagination"""
  cursor: String!
}

"""Movie type"""
type Movie implements Node {
  """The ID of an object"""
  id: ID!

  """Movie's title"""
  title: String!

  """Movie's duration"""
  duration: String!

  """Movie's description"""
  description: String!

  """Movie's global release date"""
  releaseDate: String!

  """Movie's poster path"""
  posterPath: String

  """Movie's genres"""
  genres: [String]!

  """Movie's age group"""
  ageGroups: [String]!

  """Movie's rating according to users"""
  rating: Float!

  """Movie's cast"""
  cast: [Credit]

  """Movie's crew  """
  crew: [Credit]
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Credit type"""
type Credit {
  """Credit's actor"""
  person: Person!

  """Person's role"""
  role: String!
}

"""Person type"""
type Person implements Node {
  """The ID of an object"""
  id: ID!

  """Person's name"""
  name: String!

  """Person's nacionality"""
  nacionality: String!

  """Person's date of birth"""
  dateOfBirth: String!
}

"""User type"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """User's full name"""
  fullName: String!

  """User's email"""
  email: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type UserReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserReviewEdge]
}

"""An edge in a connection."""
type UserReviewEdge {
  """The item at the end of the edge"""
  node: UserReview

  """A cursor for use in pagination"""
  cursor: String!
}

"""Users review's type"""
type UserReview implements Node {
  """The ID of an object"""
  id: ID!

  """The user who wrote the review"""
  user: User!

  """The movie being reviewed"""
  movie: Movie!

  """User's review"""
  text: String

  """User's rating"""
  rating: Float

  """When the user watched the movie"""
  watchedAt: String
}

"""The root mutation type"""
type Mutation {
  """Creates a new user"""
  userCreate(input: userCreateInput!): userCreatePayload

  """Update a user using its id"""
  userUpdate(input: userUpdateInput!): userUpdatePayload

  """Delete a user using its id"""
  userDelete(input: userDeleteInput!): userDeletePayload

  """Login a user"""
  loginUser(input: loginUserInput!): loginUserPayload

  """Add a review"""
  reviewCreate(input: reviewCreateInput!): reviewCreatePayload
}

type userCreatePayload {
  user: User
  token: String
  error: String
  clientMutationId: String
}

input userCreateInput {
  """User's full name"""
  fullName: String!

  """User's email"""
  email: String!

  """User's password"""
  password: String!

  """User's confirm password"""
  confirmPassword: String!
  clientMutationId: String
}

type userUpdatePayload {
  result: String
  error: String
  clientMutationId: String
}

input userUpdateInput {
  id: ID!

  """User's full name"""
  fullName: String!

  """User's email"""
  email: String!

  """User's password"""
  password: String!

  """User's confirm password"""
  confirmPassword: String!
  clientMutationId: String
}

type userDeletePayload {
  deletedCount: String
  clientMutationId: String
}

input userDeleteInput {
  id: ID!
  clientMutationId: String
}

type loginUserPayload {
  token: String
  user: User
  error: String
  clientMutationId: String
}

input loginUserInput {
  email: String!
  password: String!
  clientMutationId: String
}

type reviewCreatePayload {
  review: UserReview
  error: String
  clientMutationId: String
}

input reviewCreateInput {
  """Movie's unique identifier"""
  movie: ID!

  """Users review's text"""
  text: String

  """User review's rating"""
  rating: Float

  """When the user watched the movie"""
  watchedAt: String
  clientMutationId: String
}